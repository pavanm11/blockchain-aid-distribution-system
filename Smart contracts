##AidDistribution.sol##

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.28;

contract AidSystem {
    address public admin;
    mapping(address => uint256) public aidBalances;
    mapping(address => bool) public isBeneficiary;

    event BeneficiaryRegistered(address indexed beneficiary);
    event AidGranted(address indexed recipient, uint256 amount);

    constructor() {
        admin = msg.sender; // The deployer is the admin
    }

    modifier onlyAdmin() {
        require(msg.sender == admin, "Only admin can perform this action");
        _;
    }

    function registerBeneficiary(address _beneficiary) public onlyAdmin {
        require(!isBeneficiary[_beneficiary], "Already registered!");
        isBeneficiary[_beneficiary] = true;
        emit BeneficiaryRegistered(_beneficiary);
    }

    function grantAid(address recipient, uint256 amount) public onlyAdmin {
        require(isBeneficiary[recipient], "Recipient not registered!");
        aidBalances[recipient] += amount;
        emit AidGranted(recipient, amount);
    }

    function checkAidBalance(address _user) public view returns (uint256) {
        return aidBalances[_user];
    }
}
