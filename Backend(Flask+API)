##train_model.py###
it is to train my data in backend to predict the aid required by beneficiary..


import pandas as pd
import numpy as np
import joblib
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import StandardScaler

# 1️⃣ Create Synthetic Dataset
data = pd.DataFrame({
    "region": np.random.randint(1, 5, 100),
    "previous_aid": np.random.uniform(0, 1000, 100),
    "income_level": np.random.uniform(1000, 50000, 100),
    "population_affected": np.random.randint(100, 10000, 100),
    "crisis_severity": np.random.uniform(1, 10, 100),
    "requested_aid": np.random.uniform(500, 5000, 100),
    "allocated_aid": np.random.uniform(500, 5000, 100)
})

# 2️⃣ Prepare Features & Target
X = data.drop(columns=["allocated_aid"])
y = data["allocated_aid"]

# 3️⃣ Split Data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 4️⃣ Scale Features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)

# 5️⃣ Train the Model
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train_scaled, y_train)

# 6️⃣ Save Model & Scaler
joblib.dump(model, "aid_prediction_model.pkl")
joblib.dump(scaler, "scaler.pkl")

print("✅ Model and Scaler saved successfully!")


..........after training the model successfully

##server.py##

from flask import Flask, request, jsonify
from flask_cors import CORS
import joblib
import numpy as np

app = Flask(__name__)
CORS(app)

# Load model and scaler
try:
    model = joblib.load("aid_prediction_model.pkl")
    scaler = joblib.load("scaler.pkl")
    print("✅ Model and scaler loaded successfully")
except Exception as e:
    print(f"❌ Error loading model or scaler: {e}")
    model = None
    scaler = None

@app.route("/")
def home():
    return "✅ AI Aid Prediction Backend Running!"

@app.route("/predict-aid", methods=["POST"])
def predict_aid():
    if model is None or scaler is None:
        return jsonify({"error": "Model or scaler not loaded"}), 500

    try:
        data = request.json

        features = np.array([
            float(data["region"]),
            float(data["previous_aid"]),
            float(data["income_level"]),
            float(data["population_affected"]),
            float(data["crisis_severity"]),
            float(data["requested_aid"])
        ]).reshape(1, -1)

        # Scale input
        features_scaled = scaler.transform(features)

        # Predict
        predicted_aid = model.predict(features_scaled)[0]
        return jsonify({"predicted_aid": float(predicted_aid)})

    except KeyError:
        return jsonify({"error": "Missing required fields"}), 400
    except Exception as e:
        return jsonify({"error": str(e)}), 500

if __name__ == "__main__":
    app.run(debug=True, port=5000)

